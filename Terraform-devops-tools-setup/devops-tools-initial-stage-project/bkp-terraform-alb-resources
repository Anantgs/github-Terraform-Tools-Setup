# Create an ALB for each unique instance label
module "alb" {
  source  = "terraform-aws-modules/alb/aws"
  version = "9.10.0"

  for_each = { for label in var.instance_names : label => label }

  name                       = "${each.value}-alb"
  load_balancer_type         = "application"
  vpc_id                     = module.vpc.vpc_id
  subnets                    = module.vpc.public_subnets
  security_groups            = [module.loadbalancer_sg.security_group_id]
  enable_deletion_protection = false

  # listeners = {
  #   my-http-listener = {
  #     port     = 80
  #     protocol = "HTTP"
  #     forward = {
  #       target_group_key = each.value
  #     }
  #   }
  # }

  target_groups = [
      {
      name                              = "${each.value}"
      create_attachment                 = false
      #name_prefix                       = substr(each.value, 0, 6)
      protocol                          = "HTTP"
      port                              = 80
      target_type                       = "instance"
      deregistration_delay              = 10
      load_balancing_cross_zone_enabled = false
      protocol_version                  = "HTTP1"
      health_check = {
        enabled             = true
        interval            = 30
        path                = "/app1/index.html"
        port                = "traffic-port"
        healthy_threshold   = 3
        unhealthy_threshold = 3
        timeout             = 6
        protocol            = "HTTP"
        matcher             = "200-399"
      }
      tags = {
        Terraform   = "true"
        Environment = "dev"
        purpose     = "${each.value}"
      }
    }
  ]

  tags = {
    Terraform   = "true"
    Environment = "dev"
    purpose     = "${each.value}"
  }

}

output "all_instance_tags" {
  description = "All tags for the EC2 instances"
  value       = {
    for instance_key, instance_details in module.ec2_public :
    instance_key => instance_details.tags_all
  }
}

locals {
  # Define a set of allowed purposes based on the variable instance_names
  allowed_purposes = toset(values(var.instance_names))
  
  # Filter instances based on the allowed purposes
  filtered_instances = {
    for instance_key, instance_details in module.ec2_public :
    instance_key => instance_details
    if contains(local.allowed_purposes, lookup(instance_details.tags_all, "purpose", ""))
  }

  # Group instances by their purpose
  instances_by_purpose = {
    for purpose in local.allowed_purposes :
    purpose => [for instance_key, instance_details in local.filtered_instances : instance_details.id if lookup(instance_details.tags_all, "purpose", "") == purpose]
  }

 }

# Output the filtered instances
output "filtered_instances" {
  description = "Instances filtered by tags matching allowed purposes"
  value       = local.filtered_instances
}

# Output the filtered instances
output "allowed_purposes" {
  description = "Instances filtered by tags matching allowed purposes"
  value       = local.allowed_purposes
}

output "filtered_instance_ids" {
  description = "IDs of instances whose purpose matches allowed purposes"
  value       = [
    for instance_key, instance_details in local.filtered_instances :
    instance_details.id
  ]
}

output "instances_by_purpose" {
  description = "IDs of instances whose purpose matches allowed purposes"
  value       = local.instances_by_purpose
}

output "alb_outputs" {
  value = module.alb
}

# locals {
#   # Define a variable for your desired purposes
#   target_purposes = ["Elasticsearch", "kibana"]

#   # Extract target groups with the desired purposes
#   filtered_target_groups = {
#     for name, tg in module.alb.target_groups :
#     name => tg
#     if contains(local.target_purposes, tg.tags["purpose"])
#   }
# }

# output "target_groups" {
#   value = module.alb.target_groups
# }

# Load Balancer Target Group Attachment
resource "aws_lb_target_group_attachment" "mytg1" {
  for_each = local.instances_by_purpose   
  # for_each = {for k, v in module.ec2_public.id: k => v}
  target_group_arn = module.alb.target_groups["${each.key}"].arn
  target_id        = each.value
  port             = 80
}

====================================================================================================================
====================================================================================================================

# Create an ALB for each unique instance label
module "alb" {
  source  = "terraform-aws-modules/alb/aws"
  version = "9.10.0"

  for_each = { for label in var.instance_names : label => label }

  name                       = "${each.value}-alb"
  load_balancer_type         = "application"
  vpc_id                     = module.vpc.vpc_id
  subnets                    = module.vpc.public_subnets
  security_groups            = [module.loadbalancer_sg.security_group_id]
  enable_deletion_protection = false

  listeners = {
    my-http-listener = {
      port     = 80
      protocol = "HTTP"
      forward = {
        target_group_key = each.value
      }
    }
  }

  target_groups = [
      {
      name                              = "${each.value}"
      create_attachment                 = false
      name_prefix                       = substr(each.value, 0, 6)
      protocol                          = "HTTP"
      port                              = 80
      target_type                       = "instance"
      deregistration_delay              = 10
      load_balancing_cross_zone_enabled = false
      protocol_version                  = "HTTP1"
      health_check = {
        enabled             = true
        interval            = 30
        path                = "/app1/index.html"
        port                = "traffic-port"
        healthy_threshold   = 3
        unhealthy_threshold = 3
        timeout             = 6
        protocol            = "HTTP"
        matcher             = "200-399"
      }
      tags = {
        Terraform   = "true"
        Environment = "dev"
        purpose     = "${each.value}"
      }
    }
  ]

  tags = {
    Terraform   = "true"
    Environment = "dev"
    purpose     = "${each.value}"
  }

}

output "all_instance_tags" {
  description = "All tags for the EC2 instances"
  value       = {
    for instance_key, instance_details in module.ec2_public :
    instance_key => instance_details.tags_all
  }
}

locals {
  # Define a set of allowed purposes based on the variable instance_names
  allowed_purposes = toset(values(var.instance_names))
  
  # Filter instances based on the allowed purposes
  filtered_instances = {
    for instance_key, instance_details in module.ec2_public :
    instance_key => instance_details
    if contains(local.allowed_purposes, lookup(instance_details.tags_all, "purpose", ""))
  }

  # Group instances by their purpose
  instances_by_purpose = {
    for purpose in local.allowed_purposes :
    purpose => [for instance_key, instance_details in local.filtered_instances : instance_details.id if lookup(instance_details.tags_all, "purpose", "") == purpose]
  }

 }

# Output the filtered instances
output "filtered_instances" {
  description = "Instances filtered by tags matching allowed purposes"
  value       = local.filtered_instances
}

# Output the filtered instances
output "allowed_purposes" {
  description = "Instances filtered by tags matching allowed purposes"
  value       = local.allowed_purposes
}

output "filtered_instance_ids" {
  description = "IDs of instances whose purpose matches allowed purposes"
  value       = [
    for instance_key, instance_details in local.filtered_instances :
    instance_details.id
  ]
}

output "instances_by_purpose" {
  description = "IDs of instances whose purpose matches allowed purposes"
  value       = local.instances_by_purpose
}

output "alb_outputs" {
  value = module.alb
}

# locals {
#   # Define a variable for your desired purposes
#   target_purposes = ["Elasticsearch", "kibana"]

#   # Extract target groups with the desired purposes
#   filtered_target_groups = {
#     for name, tg in module.alb.target_groups :
#     name => tg
#     if contains(local.target_purposes, tg.tags["purpose"])
#   }
# }

# output "target_groups" {
#   value = module.alb.target_groups
# }

# # Load Balancer Target Group Attachment
# resource "aws_lb_target_group_attachment" "mytg1" {
#   for_each = local.instances_by_purpose   
#   # for_each = {for k, v in module.ec2_public.id: k => v}
#   target_group_arn = module.alb.target_groups[each.key].arn
#   target_id        = each.value
#   port             = 80
# }

===================================================================================================================
====================================================================================================================

# Create an ALB for each unique instance label
module "alb" {
  source  = "terraform-aws-modules/alb/aws"
  version = "9.10.0"

  for_each = { for label in var.instance_names : label => label }

  name                       = "${each.value}-alb"
  load_balancer_type         = "application"
  vpc_id                     = module.vpc.vpc_id
  subnets                    = module.vpc.public_subnets
  security_groups            = [module.loadbalancer_sg.security_group_id]
  enable_deletion_protection = false

  listeners = {
    my-http-listener = {
      port     = 80
      protocol = "HTTP"
      forward = {
        target_group_key = each.value
      }
    }
  }

  target_groups = {
    "${each.value}" = {
      create_attachment                 = false
      name_prefix                       = substr(each.value, 0, 6)
      protocol                          = "HTTP"
      port                              = 80
      target_type                       = "instance"
      deregistration_delay              = 10
      load_balancing_cross_zone_enabled = false
      protocol_version                  = "HTTP1"
      health_check = {
        enabled             = true
        interval            = 30
        path                = "/app1/index.html"
        port                = "traffic-port"
        healthy_threshold   = 3
        unhealthy_threshold = 3
        timeout             = 6
        protocol            = "HTTP"
        matcher             = "200-399"
      }
      tags = {
        Terraform   = "true"
        Environment = "dev"
        purpose     = "${each.value}"
      }
    }
  }

  tags = {
    Terraform   = "true"
    Environment = "dev"
    purpose     = "${each.value}"
  }
}

output "all_instance_tags" {
  description = "All tags for the EC2 instances"
  value       = {
    for instance_key, instance_details in module.ec2_public :
    instance_key => instance_details.tags_all
  }
}

locals {
  # Define a set of allowed purposes based on the variable instance_names
  allowed_purposes = toset(values(var.instance_names))
  
  # Filter instances based on the allowed purposes
  filtered_instances = {
    for instance_key, instance_details in module.ec2_public :
    instance_key => instance_details
    if contains(local.allowed_purposes, lookup(instance_details.tags_all, "purpose", ""))
  }

  # Group instances by their purpose
  instances_by_purpose = {
    for purpose in local.allowed_purposes :
    purpose => [for instance_key, instance_details in local.filtered_instances : instance_details.id if lookup(instance_details.tags_all, "purpose", "") == purpose]
  }

 }

# Output the filtered instances
output "filtered_instances" {
  description = "Instances filtered by tags matching allowed purposes"
  value       = local.filtered_instances
}

# Output the filtered instances
output "allowed_purposes" {
  description = "Instances filtered by tags matching allowed purposes"
  value       = local.allowed_purposes
}

output "filtered_instance_ids" {
  description = "IDs of instances whose purpose matches allowed purposes"
  value       = [
    for instance_key, instance_details in local.filtered_instances :
    instance_details.id
  ]
}

output "instances_by_purpose" {
  description = "IDs of instances whose purpose matches allowed purposes"
  value       = local.instances_by_purpose
}

output "alb_outputs" {
  value = module.alb
}

# locals {
#   # Define a variable for your desired purposes
#   target_purposes = ["Elasticsearch", "kibana"]

#   # Extract target groups with the desired purposes
#   filtered_target_groups = {
#     for name, tg in module.alb.target_groups :
#     name => tg
#     if contains(local.target_purposes, tg.tags["purpose"])
#   }
# }

# output "target_groups" {
#   value = module.alb.target_groups
# }

# # Load Balancer Target Group Attachment
# resource "aws_lb_target_group_attachment" "mytg1" {
#   for_each = local.instances_by_purpose   
#   # for_each = {for k, v in module.ec2_public.id: k => v}
#   target_group_arn = module.alb.target_groups[each.key].arn
#   target_id        = each.value
#   port             = 80
# }

